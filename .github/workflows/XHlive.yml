name: XHlive

on:
  schedule:
    - cron: '0 2 * * *' # 每天凌晨2点（UTC时间）执行，相当于北京时间上午10点
  workflow_dispatch:
    inputs:
      rebuild:
        description: '忽略构建记录以重新构建'
        required: false
        type: boolean
      donotpublish:
        description: '构建后不提交发布新版'
        required: false
        type: boolean
      testOption:
        description: 'arm64支持，不支持ijk解码'
        required: false
        type: boolean
permissions:
  contents: write

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # 获取所有历史记录，以便比较

      - name: Check for new commits
        id: check_commits
        run: |
          # 获取最后一次成功构建的SHA
          LAST_SUCCESSFUL_BUILD_SHA=$(curl -s "https://api.github.com/repos/$GITHUB_REPOSITORY/actions/runs?branch=${{ github.ref }}&event=schedule" | jq -r '.workflow_runs[0].head_sha')

          # 获取当前HEAD的SHA
          CURRENT_HEAD_SHA=$(git rev-parse HEAD)

          # 比较SHA，如果相同，则没有新的提交
          if [ "$CURRENT_HEAD_SHA" == "$LAST_SUCCESSFUL_BUILD_SHA" ]; then
            echo "No new commits since last successful build."
            exit 1
          else
            echo "New commits found."
            echo "last_commit=$LAST_SUCCESSFUL_BUILD_SHA" >> $GITHUB_ENV
          fi

      - name: Generate Tag Name
        id: generate_tag
        run: |
          # Generate tag name in the format vYY.MM.DD.HH
          TAG_NAME="v$(date +'%y.%m.%d.%H')"
          echo "tag_name=$TAG_NAME" >> $GITHUB_ENV
          VERSION_CODE="$(date +'%y%m%d%H')"
          echo "version_code=$VERSION_CODE" >> $GITHUB_ENV

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Get History
        id: get_history
        run: |
          chmod +x history.sh
          output=$(./history.sh)
          echo "$output" > history.md

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ env.tag_name }}
          release_name: Release ${{ env.tag_name }}
          draft: false
          prerelease: false
          body_path: history.md

      - name: Check version.json path
        run: ls -l version.json

      - name: Print version.json content
        run: cat version.json

      - name: Update version
        id: update_version
        run: |
          # Use sed to update the version_code and version_name in version.json
         sed -i 's/"version_code": [0-9]*/"version_code": '"${{ env.version_code }}"'/' version.json
         sed -i 's/"version_name": "v[0-9]*\.[0-9]*\.[0-9]*\.[0-9]*"/"version_name": "'"${{ env.tag_name }}"'"/' version.json

      - name: Run build with Gradle wrapper
        run: ./gradlew clean && ./gradlew assembleRelease

      - name: Sign app APK
        id: sign_app
        uses: r0adkll/sign-android-release@v1
        with:
          releaseDirectory: app/build/outputs/apk/release
          alias: ${{ secrets.ALIAS }}
          signingKeyBase64: ${{ secrets.KEYSTORE }}
          keyStorePassword: ${{ secrets.KEYSTORE_PASSWORD }}
          keyPassword: ${{ secrets.ALIAS_PASSWORD }}
        env:
          # Override default build-tools version (29.0.3) -- optional
          BUILD_TOOLS_VERSION: "34.0.0"

      - name: Set Asset Name
        id: set_asset_name
        run: |
          VERSION_WITHOUT_V=$(echo '${{ env.tag_name }}' | sed 's/^v//')
          echo "asset_name=XHlive.${VERSION_WITHOUT_V}.apk" >> $GITHUB_ENV

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ${{ steps.sign_app.outputs.signedReleaseFile }}
          asset_name: ${{ env.asset_name }}
          asset_content_type: application/vnd.android.package-archive